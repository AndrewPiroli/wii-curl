diff --git a/library/net_sockets.c b/library/net_sockets.c
index ef89a88ef0..7ec33e66fa 100644
--- a/library/net_sockets.c
+++ b/library/net_sockets.c
@@ -19,12 +19,6 @@
 
 #if defined(MBEDTLS_NET_C)
 
-#if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
-    !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
-#error "This module only works on Unix and Windows, see MBEDTLS_NET_C in mbedtls_config.h"
-#endif
-
 #include "mbedtls/platform.h"
 
 #include "mbedtls/net_sockets.h"
@@ -325,7 +319,7 @@ int mbedtls_net_accept(mbedtls_net_context *bind_ctx,
 
 #if defined(__socklen_t_defined) || defined(_SOCKLEN_T) ||  \
     defined(_SOCKLEN_T_DECLARED) || defined(__DEFINED_socklen_t) || \
-    defined(socklen_t) || (defined(_POSIX_VERSION) && _POSIX_VERSION >= 200112L)
+    defined(socklen_t) || (defined(_POSIX_VERSION) && _POSIX_VERSION >= 200112L) || defined(GEKKO)
     socklen_t n = (socklen_t) sizeof(client_addr);
     socklen_t type_len = (socklen_t) sizeof(type);
 #else
@@ -406,7 +400,9 @@ int mbedtls_net_accept(mbedtls_net_context *bind_ctx,
             }
 
             memcpy(client_ip, &addr4->sin_addr.s_addr, *cip_len);
-        } else {
+        }
+#ifndef GEKKO
+	else {
             struct sockaddr_in6 *addr6 = (struct sockaddr_in6 *) &client_addr;
             *cip_len = sizeof(addr6->sin6_addr.s6_addr);
 
@@ -416,6 +412,7 @@ int mbedtls_net_accept(mbedtls_net_context *bind_ctx,
 
             memcpy(client_ip, &addr6->sin6_addr.s6_addr, *cip_len);
         }
+#endif
     }
 
     return 0;
diff --git a/library/platform_util.c b/library/platform_util.c
index 19ef07aead..03e825af2c 100644
--- a/library/platform_util.c
+++ b/library/platform_util.c
@@ -257,6 +257,14 @@ mbedtls_ms_time_t mbedtls_ms_time(void)
                   ((mbedtls_ms_time_t) (ct.dwHighDateTime) << 32LL))/10000;
     return current_ms;
 }
+#elif defined(GEKKO)
+#include <ogc/system.h>
+#include <ogc/lwp_watchdog.h>
+mbedtls_ms_time_t mbedtls_ms_time(void)
+{
+	return ticks_to_millisecs(gettime());
+}
+
 #else
 #error "No mbedtls_ms_time available"
 #endif
diff --git a/library/timing.c b/library/timing.c
index 58f1c1ec2e..941d1d1f71 100644
--- a/library/timing.c
+++ b/library/timing.c
@@ -13,12 +13,6 @@
 
 #if !defined(MBEDTLS_TIMING_ALT)
 
-#if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
-    !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
-#error "This module only works on Unix and Windows, see MBEDTLS_TIMING_C in mbedtls_config.h"
-#endif
-
 #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)

 #include <windows.h>
@@ -28,6 +22,15 @@ struct _hr_time {
     LARGE_INTEGER start;
 };
 
+#elif defined(GEKKO)
+#include <ogc/system.h>
+#include <ogc/lwp_watchdog.h>
+
+struct _hr_time
+{
+	u64 start;
+};
+
 #else
 
 #include <unistd.h>
@@ -81,6 +84,20 @@ unsigned long mbedtls_timing_get_timer(struct mbedtls_timing_hr_time *val, int r
     }
 }
 
+#elif defined(GEKKO)
+
+unsigned long mbedtls_timing_get_timer(struct mbedtls_timing_hr_time *val, int reset)
+{
+    struct _hr_time *t = (struct _hr_time *) val;
+
+    if (reset) {
+	t->start = gettime();
+        return 0;
+    } else {
+	return diff_msec(t->start, gettime());
+    }
+}
+
 #else /* _WIN32 && !EFIX64 && !EFI32 */
 
 unsigned long mbedtls_timing_get_timer(struct mbedtls_timing_hr_time *val, int reset)
